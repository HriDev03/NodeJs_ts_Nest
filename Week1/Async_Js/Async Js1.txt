Async Js

function register(callback) {
    setTimeout(() => {
        console.log("user registered");
        callback();  // call the passed callback after registration
    }, 2000);
}

function welcome(callback) {
    setTimeout(() => {
        console.log("welcome user");
        callback();  // call the next function after welcome
    }, 1000);
}

function login(callback) {
    setTimeout(() => {
        console.log("user logged in");
        callback();  // call the next function after login
    }, 1000);
}

function getData(callback) {
    setTimeout(() => {
        console.log("got user data");
        callback();  // call the next function after getting data
    }, 1000);
}

function displayUserData(callback) {
    setTimeout(() => {
        console.log("sent user data");
        callback();  // call the next function after displaying data
    }, 1000);
}

// Register function sequence
// THIS IS THE CALLBACK HELL
register(() => {
    welcome(() => {
        login(() => {
            getData(() => {
                displayUserData(() => {
                    console.log("process complete, other application work going on");
                });
            });
        });
    });
});

// PROMISES 
function register() {
    return new Promise((resolve,reject)=>{
        setTimeout(() => {
            console.log("user registered");
           resolve ();
        }, 1000);
         // jo bhi kaam hamne karna hai voh pura ho chuka hai 
        
    });
}

function sendEmail() {
    return new Promise((res,rej)=>{
        setTimeout(() => {
            console.log("welcome user");
            res();
        }, 1000);
    })
    
}

function login() {
     return new Promise((res,rej)=>{
        setTimeout(() => {
            console.log("user Loged In");
            res();
        }, 1000);
    })
}

function getData() {
    return new Promise((res,rej)=>{
        setTimeout(()=>{
            console.log("got user data")
            res();
        },1000)
    })
}

function displayUserData() {
   return new Promise((res,rej)=>{
        setTimeout(()=>{
            console.log("showing user data")
            res();
        },1000)
        
    })
}

// Register function sequence
register()
.then(sendEmail)
.then(login).then(getData).then(displayUserData)



ERROR CASES
function register() {
    return new Promise((resolve,reject)=>{
        setTimeout(() => {
            console.log("user registered");
           resolve ();
        }, 1000);
         // jo bhi kaam hamne karna hai voh pura ho chuka hai 
        
    });
}

function sendEmail() {
    return new Promise((res,rej)=>{
        setTimeout(() => {
            console.log("welcome user");
            res();
        }, 1000);
    })
    
}

//ERROR CASE
function login() {
     return new Promise((res,rej)=>{
        setTimeout(() => {
            return rej("Error while logging in ");
            console.log("login error.....");
        }, 1000);
    })
}

function getData() {
    return new Promise((res,rej)=>{
        setTimeout(()=>{
            console.log("got user data")
            res();
        },1000)
    })
}

function displayUserData() {
   return new Promise((res,rej)=>{
        setTimeout(()=>{
            console.log("showing user data")
            res();
        },1000)
        
    })
}

// Register function sequence
register().then(sendEmail).then(login).then(getData).then(displayUserData).catch((err)=>{console.log(err)});
console.log("öther application work");



// // Register function sequence
// function loginn() {
//     return Promise.race([login(),getData(),displayUserData()])
// }

// loginn().then((data)=>{console.log(data)}).catch((err)=>{"error",err});
// // register().then(sendEmail).then(login).then(getData).then(displayUserData).catch((err)=>{console.log(err)});
// console.log("öther application work");

function register() {
    return new Promise((resolve,reject)=>{
        setTimeout(() => {
            console.log("user registered");
           resolve ();
        }, 1000);
         // jo bhi kaam hamne karna hai voh pura ho chuka hai 
        
    });
}

function sendEmail() {
    return new Promise((res,rej)=>{
        setTimeout(() => {
            console.log("welcome user");
            res();
        }, 1000);
    })
    
}

function login() {
     return new Promise((res,rej)=>{
        setTimeout(() => {
            console.log("user Loged In");
            res();
        }, 1000);
    })
}

function getData() {
    return new Promise((res,rej)=>{
        setTimeout(()=>{
            console.log("got user data")
            res();
        },1000)
    })
}

function displayUserData() {
   return new Promise((res,rej)=>{
        setTimeout(()=>{
            console.log("showing user data")
            res();
        },1000)
        
    })
}

// Register function sequence
async function auth(){
    try{
        await  register();
        await  sendEmail();
        await  login();
        await  getData();
        await displayUserData();
    }catch(err){
        console.log(err)
    }

}

// by default this auth function will also return a promise
auth().then(()=>{
    console.log(äll set);
}).catch((err)=>{
    console.log(err);
})




